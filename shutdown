#!/bin/sh
#
# shutdown -- wrapper script to prevent erroneous shutdowns via SSH
#
# Copyright Â© martin f. krafft <madduck@madduck.net>
# Released under the terms of the Artistic Licence 2.0
#
# $Id: shutdown 299 2006-10-16 14:40:47Z madduck $
#
set -eu

ME=molly-guard

CMD="${0##*/}"
EXEC="/sbin/$CMD"

case "$CMD" in
  halt|reboot|shutdown|poweroff)
    if [ ! -f $EXEC ]; then
      echo "E: $ME: not a regular file: $EXEC" >&2
      exit 4
    fi
    if [ ! -x $EXEC ]; then
      echo "E: $ME: not an executable: $EXEC" >&2
      exit 3
    fi
    ;;
  *)
    echo "E: $ME: unsupported command: $CMD" >&2
    exit 1
    ;;
esac

usage()
{
  cat <<-_eousage
	Usage: $ME [options]
	       (shielding $EXEC)

	Instead of invoking $EXEC directly, $ME will run a number of checks
        to guard against accidental shutdowns/reboots.

        Some of the checks available are:
         - Prompt the user for the machine's if the current shell is a child
           of an SSH connection (or --pretend-ssh) has been given on the
           command line, if the shell is connected to an interactive
	   terminal, and the actual command to execute is does not involve
           --help or is \`shutdown -c'.

	  $ME will always interpose the prompt if the environment variable
          ALWAYS_MOLLY is set to '1'.  This variable may be set in the file
	  /etc/default/${ME} .

	Only if the user satisfies all the checks will $ME take action.
	Specifying --molly-guard-do-nothing as argument to the command will
	make $ME echo the command it would execute rather than actually executing
	it.

	The actual command's help output follows:

	_eousage
}

ARGS=
DO_NOTHING=0
CHECK_ARGS=
for arg in "$@"; do
  case "$arg" in
    (*-molly-guard-do-nothing) DO_NOTHING=1;;
    (*-help)
      usage 2>&1
      eval $EXEC --help 2>&1
      exit 0
      ;;
    (*-pretend-ssh) CHECK_ARGS="${CHECK_ARGS:+$CHECK_ARGS }--arg --pretend-ssh";;
    *) ARGS="${ARGS:+$ARGS }$arg";;
  esac
done

do_real_cmd()
{
  if [ $DO_NOTHING -eq 1 ]; then
    echo "$ME: would run: $EXEC $ARGS"
    exit 0
  else
    eval exec $EXEC "$ARGS"
  fi
}

if [ $DO_NOTHING -eq 1 ]; then
  echo "I: demo mode; $ME will not do anything due to --molly-guard-do-nothing."
fi

# pass through certain commands
case "$CMD $ARGS" in
  (*shutdown\ *-c*) 
    echo "I: executing $CMD $ARGS regardless of check results."
    do_real_cmd
    ;;
esac

run-parts --exit-on-error $CHECK_ARGS /usr/share/molly-guard/checks.d

# run-parts won't return to us if there are failures, but I'm paranoid.
if [ $? == 0 ]; then
  do_real_cmd
  exit
fi
